package de.alombra.dine.steps.build;

import java.io.Reader;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;

import de.alombra.dine.steps.Step;
import de.alombra.dine.util.IOUtil;

/**
 * This class generates step instances from provided JavaScript code using Mozilla Rhino
 * 
 * @author ssc
 */
public class RhinoBuilder implements StepBuilder {

  /**
   * the step instance that will be generated by the JavaScript code
   */
	private Step step;

	/**
	 * dines generic JavaScript code, used for providing simple OO and some convenience functions 
	 */
	private static final String DINE_JS_CODE = IOUtil.getContent( RhinoBuilder.class.getClassLoader().getResourceAsStream( "de/alombra/dine/steps/build/base.js" ) );	
	
	
	private static final Log logger = LogFactory.getLog( RhinoBuilder.class );
	
	
	public StepBuilder createStep( Reader reader, String name ) {
	
		logger.info( "generating step ["+name+"]" );
		
		try {
		  
		  // create a Rhino context
			Context ctx = Context.enter();
		
			Scriptable scope = ctx.initStandardObjects();
			
			// a reference to this builder is needed, so the created step can be provided
			ScriptableObject.putProperty( scope, "creator", this );
			
			// an outputstream for log/debug messages
			ScriptableObject.putProperty( scope, "out", System.out );
	
			// make our generice JavaScript code available
			ctx.evaluateString( scope, DINE_JS_CODE, "base", 1,	null );
			
			// finally execute the user's JavaScript code to generate a step instance
			ctx.evaluateReader( scope, reader, name, 1, null );
			
		}
		catch ( Exception e ) {
			throw new RuntimeException(e);
		}
		finally {
			Context.exit();
		}
		
		return this;
	}
	
	
	public Step getStep() {
		return step;
	}

	public void setStep(Step step) {
		this.step = step;
	}
	
	
}
